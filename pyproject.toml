[tool.poetry]
name = "marketing-ai-agent"
version = "0.1.0"
description = "AI-powered marketing analytics agent for campaign optimization and insights"
authors = ["AI Agent <ai@agent.com>"]
readme = "README.md"
packages = [{include = "marketing_ai_agent", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.14"
langchain = "^0.3.0"
langgraph = "^0.2.0"
typer = "0.9.4"
pandas = "^2.1.0"
polars = "^0.20.0"
google-ads = "^28.0.0"
google-analytics-data = "^0.18.0"
anthropic = ">=0.64.0,<1"
rich = "13.7.1"
click = "8.1.7"
pydantic = "^2.5.0"
httpx = "^0.25.0"
python-dotenv = "^1.0.0"
jinja2 = "^3.1.0"
markdown = "^3.5.0"
plotly = "^5.17.0"
keyring = "^25.6.0"
aiofiles = "^24.1.0"
openpyxl = "^3.1.5"
langchain-anthropic = "^0.3.19"
numpy = "^2.3.2"
psutil = "^5.9.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
pytest-xdist = "^3.3.0"
pytest-benchmark = "^4.0.0"
hypothesis = "^6.82.0"
factory-boy = "^3.3.0"
faker = "^19.3.0"
responses = "^0.23.0"
black = "^23.0.0"
ruff = "^0.1.0"
pre-commit = "^3.5.0"
mypy = "^1.7.0"
mkdocs = "^1.5.0"
mkdocs-material = "^9.4.0"
mkdocstrings = {extras = ["python"], version = "^0.22.0"}
mkdocs-click = "^0.8.0"

[tool.poetry.scripts]
ai-agent = "marketing_ai_agent.cli.main:app"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=src/marketing_ai_agent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "api: Tests requiring API access",
    "cli: CLI command tests",
    "analytics: Analytics engine tests",
    "optimization: Optimization engine tests",
    "data: Data processing tests",
    "reporting: Report generation tests",
    "error_handling: Error handling tests",
    "monitoring: System monitoring tests"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/marketing_ai_agent"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/cli/main.py",
    "*/utils/error_demo.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]