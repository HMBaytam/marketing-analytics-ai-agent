name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  POETRY_VERSION: "1.8.3"
  PYTHON_VERSION: "3.11"

jobs:
  dependency_security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-security-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Export requirements
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        poetry export -f requirements.txt --output requirements-dev.txt --with dev --without-hashes
        
    - name: Run Safety (Production Dependencies)
      run: |
        pip install safety
        safety check -r requirements.txt --json --output safety-prod-report.json || true
        safety check -r requirements.txt
        
    - name: Run Safety (Dev Dependencies)
      run: |
        safety check -r requirements-dev.txt --json --output safety-dev-report.json || true
        safety check -r requirements-dev.txt
        
    - name: Run pip-audit
      run: |
        pip install pip-audit
        pip-audit --format=json --output=pip-audit-report.json --requirement requirements.txt || true
        pip-audit --requirement requirements.txt
        
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-security-reports
        path: |
          safety-*-report.json
          pip-audit-report.json

  code_security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-security-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install project
      run: poetry install --no-interaction
      
    - name: Run Bandit (Security Linting)
      run: |
        poetry add --group dev bandit[toml]
        poetry run bandit -r src/ -f json -o bandit-report.json || true
        poetry run bandit -r src/ -f txt -o bandit-report.txt || true
        poetry run bandit -r src/
        
    - name: Run Semgrep (SAST)
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        sarif: "1"
        
    - name: Upload SARIF file
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
        
    - name: Upload security analysis reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: code-security-reports
        path: |
          bandit-report.*
          semgrep.sarif

  secret_scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for secret scanning
        
    - name: Run TruffleHog (Secret Detection)
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified --json --output=trufflehog-report.json
        
    - name: Upload secret scanning results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: secret-scanning-results
        path: trufflehog-report.json

  license_check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-license-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Check licenses with pip-licenses
      run: |
        pip install pip-licenses
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        pip install -r requirements.txt
        pip-licenses --format=json --output-file=licenses-report.json --with-urls --with-description
        pip-licenses --format=csv --output-file=licenses-report.csv --with-urls
        
        # Check for problematic licenses
        echo "Checking for GPL and other copyleft licenses..."
        pip-licenses --format=plain --with-license-file | grep -iE "(GPL|AGPL|LGPL)" || echo "No problematic licenses found"
        
    - name: Upload license report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          licenses-report.json
          licenses-report.csv

  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        config-file: ./.github/codeql/codeql-config.yml
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  vulnerability_summary:
    name: Security Summary
    needs: [dependency_security, code_security, secret_scanning, license_check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all security artifacts
      uses: actions/download-artifact@v4
      with:
        path: security-reports
        
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        
        # Check if any security artifacts exist
        if find security-reports -name "*.json" -type f | grep -q .; then
          echo "✅ Security scans completed successfully" >> security-summary.md
          echo "" >> security-summary.md
          
          # Count findings in each report
          for report in security-reports/*/*.json; do
            if [ -f "$report" ]; then
              echo "- $(basename "$report"): $(jq length "$report" 2>/dev/null || echo "Report format not compatible") findings" >> security-summary.md
            fi
          done
        else
          echo "❌ No security reports found" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Recommendations" >> security-summary.md
        echo "- Review all high and medium severity findings" >> security-summary.md
        echo "- Update vulnerable dependencies immediately" >> security-summary.md
        echo "- Fix any detected secrets or hardcoded credentials" >> security-summary.md
        echo "- Ensure license compatibility for all dependencies" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        
    - name: Comment PR with security summary (if PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔒 Security Scan Results\n\n${summary}`
          });